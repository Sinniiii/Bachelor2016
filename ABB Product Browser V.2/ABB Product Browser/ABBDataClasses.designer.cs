#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1026
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProductBrowser
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ABB Product Browser Database")]
	public partial class ABBDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBackground(Background instance);
    partial void UpdateBackground(Background instance);
    partial void DeleteBackground(Background instance);
    partial void InsertVideo(Video instance);
    partial void UpdateVideo(Video instance);
    partial void DeleteVideo(Video instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertDocument(Document instance);
    partial void UpdateDocument(Document instance);
    partial void DeleteDocument(Document instance);
    partial void InsertImage(Image instance);
    partial void UpdateImage(Image instance);
    partial void DeleteImage(Image instance);
    partial void InsertOffering(Offering instance);
    partial void UpdateOffering(Offering instance);
    partial void DeleteOffering(Offering instance);
    partial void InsertSetting(Setting instance);
    partial void UpdateSetting(Setting instance);
    partial void DeleteSetting(Setting instance);
    partial void InsertTag(Tag instance);
    partial void UpdateTag(Tag instance);
    partial void DeleteTag(Tag instance);
    #endregion
		
		public ABBDataClassesDataContext() : 
				base(global::ProductBrowser.Properties.Settings.Default.ABB_Product_Browser_DatabaseConnectionString5, mappingSource)
		{
			OnCreated();
		}
		
		public ABBDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ABBDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ABBDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ABBDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Background> Backgrounds
		{
			get
			{
				return this.GetTable<Background>();
			}
		}
		
		public System.Data.Linq.Table<Video> Videos
		{
			get
			{
				return this.GetTable<Video>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Document> Documents
		{
			get
			{
				return this.GetTable<Document>();
			}
		}
		
		public System.Data.Linq.Table<Image> Images
		{
			get
			{
				return this.GetTable<Image>();
			}
		}
		
		public System.Data.Linq.Table<Offering> Offerings
		{
			get
			{
				return this.GetTable<Offering>();
			}
		}
		
		public System.Data.Linq.Table<Setting> Settings
		{
			get
			{
				return this.GetTable<Setting>();
			}
		}
		
		public System.Data.Linq.Table<Tag> Tags
		{
			get
			{
				return this.GetTable<Tag>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Background")]
	public partial class Background : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BackgroundID;
		
		private byte[] _BackgroundBinary;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBackgroundIDChanging(int value);
    partial void OnBackgroundIDChanged();
    partial void OnBackgroundBinaryChanging(byte[] value);
    partial void OnBackgroundBinaryChanged();
    #endregion
		
		public Background()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BackgroundID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BackgroundID
		{
			get
			{
				return this._BackgroundID;
			}
			set
			{
				if ((this._BackgroundID != value))
				{
					this.OnBackgroundIDChanging(value);
					this.SendPropertyChanging();
					this._BackgroundID = value;
					this.SendPropertyChanged("BackgroundID");
					this.OnBackgroundIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BackgroundBinary", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public byte[] BackgroundBinary
		{
			get
			{
				return this._BackgroundBinary;
			}
			set
			{
				if ((this._BackgroundBinary != value))
				{
					this.OnBackgroundBinaryChanging(value);
					this.SendPropertyChanging();
					this._BackgroundBinary = value;
					this.SendPropertyChanged("BackgroundBinary");
					this.OnBackgroundBinaryChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Video")]
	public partial class Video : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VideoID;
		
		private System.Nullable<int> _OfferingID;
		
		private string _OfferingName;
		
		private byte[] _VideoBinary;
		
		private string _Title;
		
		private EntityRef<Offering> _Offering;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVideoIDChanging(int value);
    partial void OnVideoIDChanged();
    partial void OnOfferingIDChanging(System.Nullable<int> value);
    partial void OnOfferingIDChanged();
    partial void OnOfferingNameChanging(string value);
    partial void OnOfferingNameChanged();
    partial void OnVideoBinaryChanging(byte[] value);
    partial void OnVideoBinaryChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public Video()
		{
			this._Offering = default(EntityRef<Offering>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VideoID
		{
			get
			{
				return this._VideoID;
			}
			set
			{
				if ((this._VideoID != value))
				{
					this.OnVideoIDChanging(value);
					this.SendPropertyChanging();
					this._VideoID = value;
					this.SendPropertyChanged("VideoID");
					this.OnVideoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfferingID", DbType="Int")]
		public System.Nullable<int> OfferingID
		{
			get
			{
				return this._OfferingID;
			}
			set
			{
				if ((this._OfferingID != value))
				{
					if (this._Offering.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOfferingIDChanging(value);
					this.SendPropertyChanging();
					this._OfferingID = value;
					this.SendPropertyChanged("OfferingID");
					this.OnOfferingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfferingName", DbType="VarChar(MAX)")]
		public string OfferingName
		{
			get
			{
				return this._OfferingName;
			}
			set
			{
				if ((this._OfferingName != value))
				{
					this.OnOfferingNameChanging(value);
					this.SendPropertyChanging();
					this._OfferingName = value;
					this.SendPropertyChanged("OfferingName");
					this.OnOfferingNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoBinary", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public byte[] VideoBinary
		{
			get
			{
				return this._VideoBinary;
			}
			set
			{
				if ((this._VideoBinary != value))
				{
					this.OnVideoBinaryChanging(value);
					this.SendPropertyChanging();
					this._VideoBinary = value;
					this.SendPropertyChanged("VideoBinary");
					this.OnVideoBinaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(MAX)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Offering_Video", Storage="_Offering", ThisKey="OfferingID", OtherKey="OfferingID", IsForeignKey=true)]
		public Offering Offering
		{
			get
			{
				return this._Offering.Entity;
			}
			set
			{
				Offering previousValue = this._Offering.Entity;
				if (((previousValue != value) 
							|| (this._Offering.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Offering.Entity = null;
						previousValue.Videos.Remove(this);
					}
					this._Offering.Entity = value;
					if ((value != null))
					{
						value.Videos.Add(this);
						this._OfferingID = value.OfferingID;
					}
					else
					{
						this._OfferingID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Offering");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryID;
		
		private string _CategoryName;
		
		private EntitySet<Document> _Documents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    #endregion
		
		public Category()
		{
			this._Documents = new EntitySet<Document>(new Action<Document>(this.attach_Documents), new Action<Document>(this.detach_Documents));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="VarChar(MAX)")]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Document", Storage="_Documents", ThisKey="CategoryID", OtherKey="CategoryID")]
		public EntitySet<Document> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Document")]
	public partial class Document : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DocumentID;
		
		private System.Nullable<int> _OfferingID;
		
		private string _OfferingName;
		
		private byte[] _DocumentBinary;
		
		private string _Title;
		
		private System.Nullable<int> _CategoryID;
		
		private string _CategoryName;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Offering> _Offering;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDocumentIDChanging(int value);
    partial void OnDocumentIDChanged();
    partial void OnOfferingIDChanging(System.Nullable<int> value);
    partial void OnOfferingIDChanged();
    partial void OnOfferingNameChanging(string value);
    partial void OnOfferingNameChanged();
    partial void OnDocumentBinaryChanging(byte[] value);
    partial void OnDocumentBinaryChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnCategoryIDChanging(System.Nullable<int> value);
    partial void OnCategoryIDChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    #endregion
		
		public Document()
		{
			this._Category = default(EntityRef<Category>);
			this._Offering = default(EntityRef<Offering>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DocumentID
		{
			get
			{
				return this._DocumentID;
			}
			set
			{
				if ((this._DocumentID != value))
				{
					this.OnDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentID = value;
					this.SendPropertyChanged("DocumentID");
					this.OnDocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfferingID", DbType="Int")]
		public System.Nullable<int> OfferingID
		{
			get
			{
				return this._OfferingID;
			}
			set
			{
				if ((this._OfferingID != value))
				{
					if (this._Offering.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOfferingIDChanging(value);
					this.SendPropertyChanging();
					this._OfferingID = value;
					this.SendPropertyChanged("OfferingID");
					this.OnOfferingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfferingName", DbType="VarChar(MAX)")]
		public string OfferingName
		{
			get
			{
				return this._OfferingName;
			}
			set
			{
				if ((this._OfferingName != value))
				{
					this.OnOfferingNameChanging(value);
					this.SendPropertyChanging();
					this._OfferingName = value;
					this.SendPropertyChanged("OfferingName");
					this.OnOfferingNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentBinary", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public byte[] DocumentBinary
		{
			get
			{
				return this._DocumentBinary;
			}
			set
			{
				if ((this._DocumentBinary != value))
				{
					this.OnDocumentBinaryChanging(value);
					this.SendPropertyChanging();
					this._DocumentBinary = value;
					this.SendPropertyChanged("DocumentBinary");
					this.OnDocumentBinaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(MAX)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int")]
		public System.Nullable<int> CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="VarChar(MAX)")]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Document", Storage="_Category", ThisKey="CategoryID", OtherKey="CategoryID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._CategoryID = value.CategoryID;
					}
					else
					{
						this._CategoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Offering_Document", Storage="_Offering", ThisKey="OfferingID", OtherKey="OfferingID", IsForeignKey=true)]
		public Offering Offering
		{
			get
			{
				return this._Offering.Entity;
			}
			set
			{
				Offering previousValue = this._Offering.Entity;
				if (((previousValue != value) 
							|| (this._Offering.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Offering.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._Offering.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._OfferingID = value.OfferingID;
					}
					else
					{
						this._OfferingID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Offering");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Image")]
	public partial class Image : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ImageID;
		
		private System.Nullable<int> _OfferingID;
		
		private string _OfferingName;
		
		private byte[] _ImageBinary;
		
		private string _Title;
		
		private EntityRef<Offering> _Offering;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnImageIDChanging(int value);
    partial void OnImageIDChanged();
    partial void OnOfferingIDChanging(System.Nullable<int> value);
    partial void OnOfferingIDChanged();
    partial void OnOfferingNameChanging(string value);
    partial void OnOfferingNameChanged();
    partial void OnImageBinaryChanging(byte[] value);
    partial void OnImageBinaryChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public Image()
		{
			this._Offering = default(EntityRef<Offering>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ImageID
		{
			get
			{
				return this._ImageID;
			}
			set
			{
				if ((this._ImageID != value))
				{
					this.OnImageIDChanging(value);
					this.SendPropertyChanging();
					this._ImageID = value;
					this.SendPropertyChanged("ImageID");
					this.OnImageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfferingID", DbType="Int")]
		public System.Nullable<int> OfferingID
		{
			get
			{
				return this._OfferingID;
			}
			set
			{
				if ((this._OfferingID != value))
				{
					if (this._Offering.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOfferingIDChanging(value);
					this.SendPropertyChanging();
					this._OfferingID = value;
					this.SendPropertyChanged("OfferingID");
					this.OnOfferingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfferingName", DbType="VarChar(MAX)")]
		public string OfferingName
		{
			get
			{
				return this._OfferingName;
			}
			set
			{
				if ((this._OfferingName != value))
				{
					this.OnOfferingNameChanging(value);
					this.SendPropertyChanging();
					this._OfferingName = value;
					this.SendPropertyChanged("OfferingName");
					this.OnOfferingNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageBinary", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public byte[] ImageBinary
		{
			get
			{
				return this._ImageBinary;
			}
			set
			{
				if ((this._ImageBinary != value))
				{
					this.OnImageBinaryChanging(value);
					this.SendPropertyChanging();
					this._ImageBinary = value;
					this.SendPropertyChanged("ImageBinary");
					this.OnImageBinaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(MAX)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Offering_Image", Storage="_Offering", ThisKey="OfferingID", OtherKey="OfferingID", IsForeignKey=true)]
		public Offering Offering
		{
			get
			{
				return this._Offering.Entity;
			}
			set
			{
				Offering previousValue = this._Offering.Entity;
				if (((previousValue != value) 
							|| (this._Offering.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Offering.Entity = null;
						previousValue.Images.Remove(this);
					}
					this._Offering.Entity = value;
					if ((value != null))
					{
						value.Images.Add(this);
						this._OfferingID = value.OfferingID;
					}
					else
					{
						this._OfferingID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Offering");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Offering")]
	public partial class Offering : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OfferingID;
		
		private string _OfferingName;
		
		private string _Parent;
		
		private string _Category;
		
		private System.Nullable<int> _ParentID;
		
		private EntitySet<Video> _Videos;
		
		private EntitySet<Document> _Documents;
		
		private EntitySet<Image> _Images;
		
		private EntitySet<Tag> _Tags;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOfferingIDChanging(int value);
    partial void OnOfferingIDChanged();
    partial void OnOfferingNameChanging(string value);
    partial void OnOfferingNameChanged();
    partial void OnParentChanging(string value);
    partial void OnParentChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnParentIDChanging(System.Nullable<int> value);
    partial void OnParentIDChanged();
    #endregion
		
		public Offering()
		{
			this._Videos = new EntitySet<Video>(new Action<Video>(this.attach_Videos), new Action<Video>(this.detach_Videos));
			this._Documents = new EntitySet<Document>(new Action<Document>(this.attach_Documents), new Action<Document>(this.detach_Documents));
			this._Images = new EntitySet<Image>(new Action<Image>(this.attach_Images), new Action<Image>(this.detach_Images));
			this._Tags = new EntitySet<Tag>(new Action<Tag>(this.attach_Tags), new Action<Tag>(this.detach_Tags));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfferingID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OfferingID
		{
			get
			{
				return this._OfferingID;
			}
			set
			{
				if ((this._OfferingID != value))
				{
					this.OnOfferingIDChanging(value);
					this.SendPropertyChanging();
					this._OfferingID = value;
					this.SendPropertyChanged("OfferingID");
					this.OnOfferingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfferingName", DbType="VarChar(MAX)")]
		public string OfferingName
		{
			get
			{
				return this._OfferingName;
			}
			set
			{
				if ((this._OfferingName != value))
				{
					this.OnOfferingNameChanging(value);
					this.SendPropertyChanging();
					this._OfferingName = value;
					this.SendPropertyChanged("OfferingName");
					this.OnOfferingNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Parent", DbType="VarChar(MAX)")]
		public string Parent
		{
			get
			{
				return this._Parent;
			}
			set
			{
				if ((this._Parent != value))
				{
					this.OnParentChanging(value);
					this.SendPropertyChanging();
					this._Parent = value;
					this.SendPropertyChanged("Parent");
					this.OnParentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="VarChar(MAX)")]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int")]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Offering_Video", Storage="_Videos", ThisKey="OfferingID", OtherKey="OfferingID")]
		public EntitySet<Video> Videos
		{
			get
			{
				return this._Videos;
			}
			set
			{
				this._Videos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Offering_Document", Storage="_Documents", ThisKey="OfferingID", OtherKey="OfferingID")]
		public EntitySet<Document> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Offering_Image", Storage="_Images", ThisKey="OfferingID", OtherKey="OfferingID")]
		public EntitySet<Image> Images
		{
			get
			{
				return this._Images;
			}
			set
			{
				this._Images.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Offering_Tag", Storage="_Tags", ThisKey="OfferingID", OtherKey="OfferingID")]
		public EntitySet<Tag> Tags
		{
			get
			{
				return this._Tags;
			}
			set
			{
				this._Tags.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Videos(Video entity)
		{
			this.SendPropertyChanging();
			entity.Offering = this;
		}
		
		private void detach_Videos(Video entity)
		{
			this.SendPropertyChanging();
			entity.Offering = null;
		}
		
		private void attach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.Offering = this;
		}
		
		private void detach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.Offering = null;
		}
		
		private void attach_Images(Image entity)
		{
			this.SendPropertyChanging();
			entity.Offering = this;
		}
		
		private void detach_Images(Image entity)
		{
			this.SendPropertyChanging();
			entity.Offering = null;
		}
		
		private void attach_Tags(Tag entity)
		{
			this.SendPropertyChanging();
			entity.Offering = this;
		}
		
		private void detach_Tags(Tag entity)
		{
			this.SendPropertyChanging();
			entity.Offering = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Setting")]
	public partial class Setting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SettingID;
		
		private string _SettingName;
		
		private string _RootFolder;
		
		private string _Language;
		
		private System.Nullable<int> _FontSize;
		
		private System.Nullable<int> _LostTagTimeout;
		
		private System.Nullable<int> _OrientationOffsetFromTag;
		
		private System.Nullable<int> _BoxColorFrameThickness;
		
		private System.Nullable<int> _CardColorFrameThickness;
		
		private System.Nullable<int> _CloseButtonSize;
		
		private System.Nullable<bool> _DoubleTap;
		
		private System.Nullable<int> _BgTimer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSettingIDChanging(int value);
    partial void OnSettingIDChanged();
    partial void OnSettingNameChanging(string value);
    partial void OnSettingNameChanged();
    partial void OnRootFolderChanging(string value);
    partial void OnRootFolderChanged();
    partial void OnLanguageChanging(string value);
    partial void OnLanguageChanged();
    partial void OnFontSizeChanging(System.Nullable<int> value);
    partial void OnFontSizeChanged();
    partial void OnLostTagTimeoutChanging(System.Nullable<int> value);
    partial void OnLostTagTimeoutChanged();
    partial void OnOrientationOffsetFromTagChanging(System.Nullable<int> value);
    partial void OnOrientationOffsetFromTagChanged();
    partial void OnBoxColorFrameThicknessChanging(System.Nullable<int> value);
    partial void OnBoxColorFrameThicknessChanged();
    partial void OnCardColorFrameThicknessChanging(System.Nullable<int> value);
    partial void OnCardColorFrameThicknessChanged();
    partial void OnCloseButtonSizeChanging(System.Nullable<int> value);
    partial void OnCloseButtonSizeChanged();
    partial void OnDoubleTapChanging(System.Nullable<bool> value);
    partial void OnDoubleTapChanged();
    partial void OnBgTimerChanging(System.Nullable<int> value);
    partial void OnBgTimerChanged();
    #endregion
		
		public Setting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettingID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SettingID
		{
			get
			{
				return this._SettingID;
			}
			set
			{
				if ((this._SettingID != value))
				{
					this.OnSettingIDChanging(value);
					this.SendPropertyChanging();
					this._SettingID = value;
					this.SendPropertyChanged("SettingID");
					this.OnSettingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettingName", DbType="VarChar(MAX)")]
		public string SettingName
		{
			get
			{
				return this._SettingName;
			}
			set
			{
				if ((this._SettingName != value))
				{
					this.OnSettingNameChanging(value);
					this.SendPropertyChanging();
					this._SettingName = value;
					this.SendPropertyChanged("SettingName");
					this.OnSettingNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RootFolder", DbType="VarChar(MAX)")]
		public string RootFolder
		{
			get
			{
				return this._RootFolder;
			}
			set
			{
				if ((this._RootFolder != value))
				{
					this.OnRootFolderChanging(value);
					this.SendPropertyChanging();
					this._RootFolder = value;
					this.SendPropertyChanged("RootFolder");
					this.OnRootFolderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Language", DbType="VarChar(MAX)")]
		public string Language
		{
			get
			{
				return this._Language;
			}
			set
			{
				if ((this._Language != value))
				{
					this.OnLanguageChanging(value);
					this.SendPropertyChanging();
					this._Language = value;
					this.SendPropertyChanged("Language");
					this.OnLanguageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FontSize", DbType="Int")]
		public System.Nullable<int> FontSize
		{
			get
			{
				return this._FontSize;
			}
			set
			{
				if ((this._FontSize != value))
				{
					this.OnFontSizeChanging(value);
					this.SendPropertyChanging();
					this._FontSize = value;
					this.SendPropertyChanged("FontSize");
					this.OnFontSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LostTagTimeout", DbType="Int")]
		public System.Nullable<int> LostTagTimeout
		{
			get
			{
				return this._LostTagTimeout;
			}
			set
			{
				if ((this._LostTagTimeout != value))
				{
					this.OnLostTagTimeoutChanging(value);
					this.SendPropertyChanging();
					this._LostTagTimeout = value;
					this.SendPropertyChanged("LostTagTimeout");
					this.OnLostTagTimeoutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrientationOffsetFromTag", DbType="Int")]
		public System.Nullable<int> OrientationOffsetFromTag
		{
			get
			{
				return this._OrientationOffsetFromTag;
			}
			set
			{
				if ((this._OrientationOffsetFromTag != value))
				{
					this.OnOrientationOffsetFromTagChanging(value);
					this.SendPropertyChanging();
					this._OrientationOffsetFromTag = value;
					this.SendPropertyChanged("OrientationOffsetFromTag");
					this.OnOrientationOffsetFromTagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoxColorFrameThickness", DbType="Int")]
		public System.Nullable<int> BoxColorFrameThickness
		{
			get
			{
				return this._BoxColorFrameThickness;
			}
			set
			{
				if ((this._BoxColorFrameThickness != value))
				{
					this.OnBoxColorFrameThicknessChanging(value);
					this.SendPropertyChanging();
					this._BoxColorFrameThickness = value;
					this.SendPropertyChanged("BoxColorFrameThickness");
					this.OnBoxColorFrameThicknessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardColorFrameThickness", DbType="Int")]
		public System.Nullable<int> CardColorFrameThickness
		{
			get
			{
				return this._CardColorFrameThickness;
			}
			set
			{
				if ((this._CardColorFrameThickness != value))
				{
					this.OnCardColorFrameThicknessChanging(value);
					this.SendPropertyChanging();
					this._CardColorFrameThickness = value;
					this.SendPropertyChanged("CardColorFrameThickness");
					this.OnCardColorFrameThicknessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CloseButtonSize", DbType="Int")]
		public System.Nullable<int> CloseButtonSize
		{
			get
			{
				return this._CloseButtonSize;
			}
			set
			{
				if ((this._CloseButtonSize != value))
				{
					this.OnCloseButtonSizeChanging(value);
					this.SendPropertyChanging();
					this._CloseButtonSize = value;
					this.SendPropertyChanged("CloseButtonSize");
					this.OnCloseButtonSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoubleTap", DbType="Bit")]
		public System.Nullable<bool> DoubleTap
		{
			get
			{
				return this._DoubleTap;
			}
			set
			{
				if ((this._DoubleTap != value))
				{
					this.OnDoubleTapChanging(value);
					this.SendPropertyChanging();
					this._DoubleTap = value;
					this.SendPropertyChanged("DoubleTap");
					this.OnDoubleTapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BgTimer", DbType="Int")]
		public System.Nullable<int> BgTimer
		{
			get
			{
				return this._BgTimer;
			}
			set
			{
				if ((this._BgTimer != value))
				{
					this.OnBgTimerChanging(value);
					this.SendPropertyChanging();
					this._BgTimer = value;
					this.SendPropertyChanged("BgTimer");
					this.OnBgTimerChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tag")]
	public partial class Tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TagID;
		
		private System.Data.Linq.Binary _HexValue;
		
		private System.Nullable<int> _OfferingID;
		
		private string _OfferingName;
		
		private System.Nullable<bool> _IsEditable;
		
		private EntityRef<Offering> _Offering;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTagIDChanging(int value);
    partial void OnTagIDChanged();
    partial void OnHexValueChanging(System.Data.Linq.Binary value);
    partial void OnHexValueChanged();
    partial void OnOfferingIDChanging(System.Nullable<int> value);
    partial void OnOfferingIDChanged();
    partial void OnOfferingNameChanging(string value);
    partial void OnOfferingNameChanged();
    partial void OnIsEditableChanging(System.Nullable<bool> value);
    partial void OnIsEditableChanged();
    #endregion
		
		public Tag()
		{
			this._Offering = default(EntityRef<Offering>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TagID
		{
			get
			{
				return this._TagID;
			}
			set
			{
				if ((this._TagID != value))
				{
					this.OnTagIDChanging(value);
					this.SendPropertyChanging();
					this._TagID = value;
					this.SendPropertyChanged("TagID");
					this.OnTagIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HexValue", AutoSync=AutoSync.Always, DbType="VarBinary(8)", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary HexValue
		{
			get
			{
				return this._HexValue;
			}
			set
			{
				if ((this._HexValue != value))
				{
					this.OnHexValueChanging(value);
					this.SendPropertyChanging();
					this._HexValue = value;
					this.SendPropertyChanged("HexValue");
					this.OnHexValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfferingID", DbType="Int")]
		public System.Nullable<int> OfferingID
		{
			get
			{
				return this._OfferingID;
			}
			set
			{
				if ((this._OfferingID != value))
				{
					if (this._Offering.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOfferingIDChanging(value);
					this.SendPropertyChanging();
					this._OfferingID = value;
					this.SendPropertyChanged("OfferingID");
					this.OnOfferingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfferingName", DbType="VarChar(MAX)")]
		public string OfferingName
		{
			get
			{
				return this._OfferingName;
			}
			set
			{
				if ((this._OfferingName != value))
				{
					this.OnOfferingNameChanging(value);
					this.SendPropertyChanging();
					this._OfferingName = value;
					this.SendPropertyChanged("OfferingName");
					this.OnOfferingNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsEditable", DbType="Bit")]
		public System.Nullable<bool> IsEditable
		{
			get
			{
				return this._IsEditable;
			}
			set
			{
				if ((this._IsEditable != value))
				{
					this.OnIsEditableChanging(value);
					this.SendPropertyChanging();
					this._IsEditable = value;
					this.SendPropertyChanged("IsEditable");
					this.OnIsEditableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Offering_Tag", Storage="_Offering", ThisKey="OfferingID", OtherKey="OfferingID", IsForeignKey=true)]
		public Offering Offering
		{
			get
			{
				return this._Offering.Entity;
			}
			set
			{
				Offering previousValue = this._Offering.Entity;
				if (((previousValue != value) 
							|| (this._Offering.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Offering.Entity = null;
						previousValue.Tags.Remove(this);
					}
					this._Offering.Entity = value;
					if ((value != null))
					{
						value.Tags.Add(this);
						this._OfferingID = value.OfferingID;
					}
					else
					{
						this._OfferingID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Offering");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
